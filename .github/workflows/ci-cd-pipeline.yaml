name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: docker.io
  IMAGE_NAME: dockerakilesh/number-game

jobs:
  # Job 1: Code Quality & Testing (Fastest - Fail Fast)
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate HTML
        run: |
          sudo apt-get update && sudo apt-get install -y tidy
          tidy -q -e application/index.html || echo "HTML validation completed"

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Check YAML files
        run: |
          sudo apt-get install -y yamllint
          yamllint k8s/ || echo "YAML lint completed"

      - name: Test JavaScript functionality
        run: |
          # Basic syntax check for JS
          node -c application/index.html 2>/dev/null || echo "JS syntax check completed"

  # Job 2: Build & Containerize
  build:
    name: üèóÔ∏è Build Container 
    runs-on: ubuntu-latest
    environment: Production
    needs: test  # Only run if tests pass
    env:
      # Set environment variables that will be available to all subsequent jobs
      SHORT_SHA: ${{ github.sha }}
      BUILD_TIMESTAMP: ${{ github.run_number }}
    outputs:
      # Keep only non-sensitive outputs for backwards compatibility
      short-sha: ${{ steps.meta.outputs.SHORT_SHA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata and set environment
        id: meta
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_VERSION="${SHORT_SHA}-${TIMESTAMP}"
          
          # Set outputs for backwards compatibility
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT
          
          # Set environment variables for the workflow
          echo "BUILT_IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV
          echo "BUILT_IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          
          # Debug: Print what we're setting
          echo "=== Build Job Metadata ==="
          echo "SHORT_SHA: ${SHORT_SHA}"
          echo "BUILT_IMAGE_TAG: ${SHORT_SHA}"
          echo "BUILT_IMAGE_NAME: ${IMAGE_NAME}"
          echo "BUILD_VERSION: ${BUILD_VERSION}"
          echo "Full Image Reference: ${IMAGE_NAME}:${SHORT_SHA}"
          echo "=========================="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64  
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.BUILT_IMAGE_TAG }}
          labels: |
            org.opencontainers.image.title=Number Game
            org.opencontainers.image.description=Guess the Number Game Microservice
            org.opencontainers.image.version=${{ env.BUILD_VERSION }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image reference for subsequent jobs
        run: |
          # Set the built image reference as a workflow environment variable
          echo "SCANNED_IMAGE=${IMAGE_NAME}:${BUILT_IMAGE_TAG}" >> $GITHUB_ENV
          
          # Also write to a shared file that other jobs can source
          echo "export SCANNED_IMAGE=${IMAGE_NAME}:${BUILT_IMAGE_TAG}" > /tmp/image_env.sh
          echo "export BUILT_IMAGE_TAG=${BUILT_IMAGE_TAG}" >> /tmp/image_env.sh
          echo "export BUILT_IMAGE_NAME=${IMAGE_NAME}" >> /tmp/image_env.sh

  # Job 3: Security Scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
    env:
      BUILT_IMAGE_TAG: ${{ needs.build.outputs.short-sha }}
      BUILT_IMAGE_NAME: ${{ vars.IMAGE_NAME || 'dockerakilesh/number-game' }}
    steps:
      - name: Set up image reference
        run: |
          SCANNED_IMAGE="${BUILT_IMAGE_NAME}:${BUILT_IMAGE_TAG}"
          echo "SCANNED_IMAGE=${SCANNED_IMAGE}" >> $GITHUB_ENV
          echo "BUILT_IMAGE_TAG: '${BUILT_IMAGE_TAG}'"
          echo "BUILT_IMAGE_NAME: '${BUILT_IMAGE_NAME}'"
          echo "Constructed SCANNED_IMAGE: '${SCANNED_IMAGE}'"

      - name: Verify image reference is valid
        run: |
          if [ -z "$BUILT_IMAGE_TAG" ] || [ -z "$BUILT_IMAGE_NAME" ] || [ -z "$SCANNED_IMAGE" ]; then
            echo "ERROR: One or more required env vars are missing!"
            exit 1
          fi
          echo "‚úÖ Validated image: $SCANNED_IMAGE"

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SCANNED_IMAGE }}
          format: table
          exit-code: 0  # Prevents job failure

      - name: Run Trivy and generate SARIF report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SCANNED_IMAGE }}
          format: sarif
          output: trivy-results.sarif
        continue-on-error: true

      - name: Upload SARIF results as artifact (since GitHub Security UI is unavailable)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif


  # Job 4: Deploy to Development (Feature branches)
  deploy-dev:
    name: üöÄ Deploy to Dev 
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    environment: development
    env:
      BUILT_IMAGE_TAG: ${{ needs.build.outputs.short-sha }}
      BUILT_IMAGE_NAME: ${{ vars.IMAGE_NAME || 'dockerakilesh/number-game' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Dev Kubernetes manifest
        run: |
          DEPLOYMENT_IMAGE="${BUILT_IMAGE_NAME}:${BUILT_IMAGE_TAG}"
          echo "Updating dev deployment with image: ${DEPLOYMENT_IMAGE}"
          
          sed -i "s|image: ${{ env.IMAGE_NAME }}:.*|image: ${DEPLOYMENT_IMAGE}|" k8s/deployment.yaml
          # Add dev-specific configurations
          sed -i 's|replicas: 1|replicas: 1|' k8s/deployment.yaml

      - name: Commit dev manifest changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üîß [DEV] Update image tag to ${{ env.BUILT_IMAGE_TAG }}"
          file_pattern: k8s/deployment.yaml
          branch: ${{ github.head_ref }}

  # Job 5: Deploy to Production (Main branch only)
  deploy-prod:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production  # GitHub Environment protection
    env:
      BUILT_IMAGE_TAG: ${{ needs.build.outputs.short-sha }}
      BUILT_IMAGE_NAME: ${{ vars.IMAGE_NAME || 'dockerakilesh/number-game' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Production Kubernetes manifest
        run: |
          DEPLOYMENT_IMAGE="${BUILT_IMAGE_NAME}:${BUILT_IMAGE_TAG}"
          echo "Updating production deployment with image: ${DEPLOYMENT_IMAGE}"
          
          sed -i "s|image: ${{ env.IMAGE_NAME }}:.*|image: ${DEPLOYMENT_IMAGE}|" k8s/deployment.yaml
          # Production-specific configurations
          sed -i 's|replicas: 1|replicas: 3|' k8s/deployment.yaml

      - name: Commit production manifest changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üöÄ [PROD] Update image tag to ${{ env.BUILT_IMAGE_TAG }}"
          file_pattern: k8s/deployment.yaml

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.BUILT_IMAGE_TAG }}
          name: Release v${{ env.BUILT_IMAGE_TAG }}
          body: |
            üöÄ **Production Deployment**
            
            **Image:** `${{ env.BUILT_IMAGE_NAME }}:${{ env.BUILT_IMAGE_TAG }}`
            **Commit:** ${{ github.sha }}
            **Changes:** ${{ github.event.head_commit.message }}
            
            **Deployed to:** https://game.local

  # Job 6: Notification & Monitoring
  notify:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-prod, deploy-dev]
    if: always()  # Run regardless of success/failure
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
            echo "‚úÖ Production deployment successful!"
            # Add Slack/Teams notification here
          elif [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "‚úÖ Development deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi