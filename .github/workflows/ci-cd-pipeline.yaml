name: GitOps Pipeline with ArgoCD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: docker.io
  IMAGE_NAME: dockerakilesh/number-game
  CONFIG_REPO: "YOUR_USERNAME/number-game-config"  # Replace with your username

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate HTML
        run: |
          sudo apt-get update && sudo apt-get install -y tidy
          tidy -q -e application/index.html || echo "HTML validation completed"

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Test JavaScript functionality
        run: |
          node -c application/index.html 2>/dev/null || echo "JS syntax check completed"

  # Job 2: Build & Push Container
  build:
    name: üèóÔ∏è Build Container
    runs-on: ubuntu-latest
    environment: Production
    needs: test
    outputs:
      short-sha: ${{ steps.meta.outputs.SHORT_SHA }}
      image-tag: ${{ steps.meta.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_NAME}:${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=${IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          echo "=== Build Metadata ==="
          echo "SHORT_SHA: ${SHORT_SHA}"
          echo "IMAGE_TAG: ${IMAGE_NAME}:${SHORT_SHA}"
          echo "======================="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE_LATEST }}
            ${{ steps.meta.outputs.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.title=Number Game
            org.opencontainers.image.description=Guess the Number Game with Prometheus Metrics
            org.opencontainers.image.version=${{ steps.meta.outputs.BUILD_VERSION }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Security Scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
    steps:
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: table
          exit-code: 0

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: trivy-results.sarif
        continue-on-error: true

  # Job 4: Update Config Repository (GitOps)
  update-config:
    name: üîÑ Update Config Repo
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONFIG_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: config-repo

      - name: Update production deployment
        run: |
          cd config-repo
          
          # Update image tag in production deployment
          sed -i "s|image: ${IMAGE_NAME}:.*|image: ${{ needs.build.outputs.image-tag }}|" environments/production/deployment.yaml
          
          # Verify the change
          echo "Updated deployment.yaml:"
          cat environments/production/deployment.yaml | grep image
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit and push changes
          git add environments/production/deployment.yaml
          git commit -m "üöÄ Update production image to ${{ needs.build.outputs.image-tag }}

          Triggered by: ${{ github.event.head_commit.message }}
          Commit: ${{ github.sha }}
          Build: ${{ github.run_number }}"
          
          git push

      - name: Update development deployment (if develop branch)
        if: github.ref == 'refs/heads/develop'
        run: |
          cd config-repo
          
          # Update image tag in development deployment
          sed -i "s|image: ${IMAGE_NAME}:.*|image: ${{ needs.build.outputs.image-tag }}|" environments/development/deployment.yaml
          
          # Commit and push changes
          git add environments/development/deployment.yaml
          git commit -m "üîß Update development image to ${{ needs.build.outputs.image-tag }}"
          git push

  # Job 5: Trigger ArgoCD Sync (Optional)
  sync-argocd:
    name: üîÑ Sync ArgoCD
    runs-on: ubuntu-latest
    needs: [update-config]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger ArgoCD sync via API
        run: |
          echo "üîÑ ArgoCD will automatically detect changes and sync"
          echo "You can also manually sync in ArgoCD UI at https://localhost:8080"
          echo ""
          echo "Application: number-game-prod"
          echo "New image: ${{ needs.build.outputs.image-tag }}"
          
          # Optional: If you want to trigger sync via API
          # You would need ArgoCD API token and endpoint
          # curl -X POST "https://argocd.example.com/api/v1/applications/number-game-prod/sync" \
          #      -H "Authorization: Bearer $ARGOCD_TOKEN"

  # Job 6: Create Release
  release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    needs: [build, update-config]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.short-sha }}
          name: Release v${{ needs.build.outputs.short-sha }}
          body: |
            üöÄ **GitOps Deployment with ArgoCD**
            
            **Docker Image:** `${{ needs.build.outputs.image-tag }}`
            **Commit:** ${{ github.sha }}
            **Changes:** ${{ github.event.head_commit.message }}
            
            **GitOps Flow:**
            ‚úÖ Code updated ‚Üí Docker image built ‚Üí Config repo updated ‚Üí ArgoCD deploys
            
            **Access:**
            - üéÆ Game: http://game.local
            - üìä Metrics: http://game.local/metrics
            - üéØ ArgoCD: https://localhost:8080
            - üìà Grafana: kubectl port-forward svc/monitoring-grafana 8000:80
            
            **Config Repository:**
            - Production: https://github.com/${{ env.CONFIG_REPO }}/tree/main/environments/production
            
          generate_release_notes: true

  # Job 7: Notification
  notify:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: [update-config, sync-argocd, release]
    if: always()
    steps:
      - name: GitOps deployment notification
        run: |
          if [[ "${{ needs.update-config.result }}" == "success" ]]; then
            echo "‚úÖ GitOps update successful!"
            echo ""
            echo "üîÑ Config repository updated with new image"
            echo "üéØ ArgoCD will automatically sync the changes"
            echo "üéÆ Game will be available at: http://game.local"
            echo "üìä Metrics endpoint: http://game.local/metrics"
            echo ""
            echo "Next steps:"
            echo "1. Check ArgoCD UI: https://localhost:8080"
            echo "2. Verify application sync status"
            echo "3. Monitor deployment in ArgoCD"
          else
            echo "‚ùå GitOps update failed!"
            echo "Check the logs above for details"
          fi