name: GitOps Pipeline with ArgoCD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: docker.io
  IMAGE_NAME: dockerakilesh/number-game
  CONFIG_REPO: "Number-Game-App/number-game-gitops"

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate HTML
        run: |
          sudo apt-get update && sudo apt-get install -y tidy
          tidy -q -e game-service/index.html || echo "HTML validation completed"

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: game-service/Dockerfile
          failure-threshold: error

      - name: Validate Helm Chart
        run: |
          helm lint helm-chart/
          helm template test helm-chart/ --values helm-chart/values/development.yaml

  # Job 2: Build & Push Container
  build:
    name: 🏗️ Build Container
    runs-on: ubuntu-latest
    needs: test
    outputs:
      short-sha: ${{ steps.meta.outputs.SHORT_SHA }}
      image-tag: ${{ steps.meta.outputs.IMAGE_TAG }}
      environment: ${{ steps.meta.outputs.ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Extract metadata
        id: meta
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH_NAME=${GITHUB_REF##*/}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          if [[ "$BRANCH_NAME" == "main" ]]; then
            ENVIRONMENT="production"
            TAG="latest"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            ENVIRONMENT="development"
            TAG="dev-${SHORT_SHA}"
          else
            ENVIRONMENT="feature"
            TAG="feat-${SHORT_SHA}"
          fi

          IMAGE_TAG="${IMAGE_NAME}:${TAG}"

          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT

          # Save to GITHUB_ENV for later jobs
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          
          echo "=== Build Metadata ==="
          echo "BRANCH: ${BRANCH_NAME}"
          echo "ENVIRONMENT: ${ENVIRONMENT}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          echo "======================="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./game-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=Number Game
            org.opencontainers.image.description=Simple Number Game with Team Dashboards
            org.opencontainers.image.version=${{ steps.meta.outputs.BUILD_VERSION }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Security Scanning (FIXED)
  security:
      name: 🔒 Security Scan
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Debug image reference
          run: |
            echo "🔍 Image to scan: ${{ needs.build.outputs.image-tag }}"
            echo "🏷️ Environment: ${{ needs.build.outputs.environment }}"

        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ${{ needs.build.outputs.image-tag }}
            format: 'table'
            exit-code: '0'
            severity: 'HIGH,CRITICAL'
          continue-on-error: true

        - name: Security scan completed
          run: |
            echo "✅ Security scan finished for ${{ needs.build.outputs.image-tag }}"

  # Job 4: Update GitOps Repository
 update-gitops:
    name: 🔄 Update GitOps Repo
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'push'
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONFIG_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }} 
          path: gitops-repo

      - name: Update deployment configuration
        run: |
          cd gitops-repo
          
          ENVIRONMENT="${{ needs.build.outputs.environment }}"
          SHORT_SHA="${{ needs.build.outputs.short-sha }}"
          
          echo "Updating ${ENVIRONMENT} environment..."
          
          # Update the Helm values file for the specific environment
          if [[ "$ENVIRONMENT" == "production" ]]; then
            sed -i "s|tag: \".*\"|tag: \"latest\"|" environments/production/values.yaml
          elif [[ "$ENVIRONMENT" == "development" ]]; then
            sed -i "s|tag: \".*\"|tag: \"dev-${SHORT_SHA}\"|" environments/development/values.yaml
          fi
          
          # Configure git
          git config --local user.email "gitops@company.com"
          git config --local user.name "GitOps Bot"
          
          # Commit and push changes
          git add .
          git commit -m "🚀 Update ${ENVIRONMENT} to ${{ needs.build.outputs.image-tag }}

          Source commit: ${{ github.sha }}
          Triggered by: ${{ github.actor }}
          Build: ${{ github.run_number }}" || echo "No changes to commit"
          
          git push

  # Job 5: Create Release (Production only)
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build, update-gitops]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.short-sha }}
          name: Release v${{ needs.build.outputs.short-sha }}
          body: |
            🚀 **Production Release**
            
            **Docker Image:** `${{ needs.build.outputs.image-tag }}`
            **Environment:** ${{ needs.build.outputs.environment }}
            **Commit:** ${{ github.sha }}
            
            **Team Dashboards:**
            - 👨‍💻 **Development Team**: Focus on app performance and debugging
            - 🛠️ **SRE Team**: Infrastructure health and reliability metrics  
            - 👔 **Management**: Business KPIs and service uptime
            - 🔒 **Security Team**: Vulnerability and compliance monitoring
            
            **Access:**
            - 🎮 Game: http://game.local
            - 📊 Metrics: http://game.local/metrics
            - 🎯 ArgoCD: https://localhost:8080
            
          generate_release_notes: true

  # Job 6: Notification
  notify:
    name: 📢 Team Notifications
    runs-on: ubuntu-latest
    needs: [update-gitops]
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.update-gitops.result }}" == "success" ]]; then
            echo "✅ GitOps deployment successful!"
            echo ""
            echo "🔄 Environment: ${{ needs.build.outputs.environment }}"
            echo "🐳 Image: ${{ needs.build.outputs.image-tag }}"
            echo "🎯 ArgoCD will automatically sync changes"
            echo ""
            echo "📊 Team Dashboards Available:"
            echo "- Development Team: Performance metrics"
            echo "- SRE Team: Infrastructure health"
            echo "- Management: Business KPIs"
            echo "- Security Team: Compliance status"
          else
            echo "❌ Deployment failed - check logs above"
          fi